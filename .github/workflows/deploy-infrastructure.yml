name: Deploy Infrastructure

on:
  push:
    branches:
      - staging
  workflow_dispatch:      

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_VAR_environment: staging    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2      

    - name: Setup Infrastructure Prerequisites
      run: |
        chmod +x ./devops/scripts/infra-manager.sh        
        ./devops/scripts/infra-manager.sh verify

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
            terraform_version: "1.7.0"  # Specify your desired version
            terraform_wrapper: false

    - name: Format and Validate Terraform Code
      working-directory: ./devops/terraform
      run: |
        terraform fmt -check -diff
        terraform init
        terraform validate

    - name: Plan with Cost Estimation
      id: plan
      working-directory: ./devops/terraform
      run: |
        terraform plan -out=tfplan
        echo "Plan file created at: tfplan"
        
        # Show resource changes
        echo "Planned changes:"
        terraform show -json tfplan | jq -r '.resource_changes[] | select(.change.actions[] != "no-op")'

    - name: Apply with Safety Measures
      working-directory: ./devops/terraform
      timeout-minutes: 30
      run: |
        terraform apply -auto-approve tfplan || {
          echo "Apply failed, initiating cleanup..."
          terraform destroy -auto-approve
          exit 1
        }

    - name: Verify Deployment
      if: success()
      working-directory: ./devops/terraform
      run: |
        # Verify EKS cluster is ready
        CLUSTER_STATUS=$(aws eks describe-cluster --name vanillatstodo-cluster --query 'cluster.status' --output text)
        if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
          echo "Cluster is not active. Status: $CLUSTER_STATUS"
          exit 1
        fi

    - name: Capture Outputs
      if: success()
      working-directory: ./devops/terraform
      run: |
        echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
        echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV

    - name: Notify on Completion
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const message = `Infrastructure deployment ${context.job.status}
          Environment: ${process.env.TF_WORKSPACE}
          EKS Cluster: ${process.env.EKS_CLUSTER_NAME}
          VPC: ${process.env.VPC_ID}
          Timestamp: ${new Date().toISOString()}`;
          
          console.log(message);
          
          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }