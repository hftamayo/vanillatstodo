name: "Destroy Infrastructure"

"on":
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Type 'destroy' to confirm"
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirmation == 'destroy' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.7.0"

      - name: Destroy EKS Resources
        run: |
          CLUSTER_NAME="vanillatstodo-cluster"

          echo "üîç Checking for EKS node groups..."
          NODE_GROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --query 'nodegroups[*]' --output text || echo "")

          if [ ! -z "$NODE_GROUPS" ]; then
            echo "Found node groups: $NODE_GROUPS"
            for ng in $NODE_GROUPS; do
              echo "üóëÔ∏è Deleting node group: $ng"
              aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $ng
              echo "‚è≥ Waiting for node group deletion..."
              aws eks wait nodegroup-deleted --cluster-name $CLUSTER_NAME --nodegroup-name $ng
            done
          fi

          echo "üóëÔ∏è Deleting EKS cluster..."
          aws eks delete-cluster --name $CLUSTER_NAME
          echo "‚è≥ Waiting for cluster deletion..."
          aws eks wait cluster-deleted --name $CLUSTER_NAME

      - name: Clean Up Network Resources
        run: |
          echo "üîç Finding VPC resources..."
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=*vanillatstodo*" --query 'Vpcs[0].VpcId' --output text)

          if [ "$VPC_ID" != "None" ]; then
            echo "Found VPC: $VPC_ID"
            
            # Delete Security Groups (except default)
            echo "üîç Finding Security Groups..."
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
            for sg in $SG_IDS; do
              echo "üóëÔ∏è Deleting Security Group: $sg"
              aws ec2 delete-security-group --group-id $sg || true
            done

            # Delete NAT Gateways
            echo "üîç Finding NAT Gateways..."
            NAT_IDS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[*].NatGatewayId' --output text)
            for nat in $NAT_IDS; do
              echo "üóëÔ∏è Deleting NAT Gateway: $nat"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat
              echo "‚è≥ Waiting for NAT Gateway deletion..."
              aws ec2 wait nat-gateway-deleted --nat-gateway-ids $nat
            done

            # Delete Route Tables (except main)
            echo "üîç Finding Route Tables..."
            RT_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text)
            for rt in $RT_IDS; do
              echo "üóëÔ∏è Deleting Route Table: $rt"
              aws ec2 delete-route-table --route-table-id $rt || true
            done

            # Delete Internet Gateway
            IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text)
            if [ "$IGW_ID" != "None" ]; then
              echo "üóëÔ∏è Detaching and deleting Internet Gateway..."
              aws ec2 detach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
            fi
            
            # Delete Network Interfaces
            echo "üîç Finding Network Interfaces..."
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
            for eni in $ENI_IDS; do
              echo "üóëÔ∏è Deleting Network Interface: $eni"
              aws ec2 delete-network-interface --network-interface-id $eni || true
            done

            # Delete Subnets
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text)
            for subnet in $SUBNET_IDS; do
              echo "üóëÔ∏è Deleting subnet: $subnet"
              aws ec2 delete-subnet --subnet-id $subnet
            done
            
            # Delete VPC
            echo "üóëÔ∏è Deleting VPC..."
            aws ec2 delete-vpc --vpc-id $VPC_ID
          fi
